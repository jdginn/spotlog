// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDislike = `-- name: CreateDislike :exec
INSERT INTO dislikes DEFAULT VALUES
`

func (q *Queries) CreateDislike(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createDislike)
	return err
}

const createLike = `-- name: CreateLike :exec

INSERT INTO likes DEFAULT VALUES
`

// TODO:
// TODO name: GetMostRecentlyPlayedTrack
// TODO name: GetMostRecentPlayedAtTimestamp
// TODO name: GetPlayCountForTrackByName
// TODO name: GetMostRedentPlayOfTrackByName
func (q *Queries) CreateLike(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createLike)
	return err
}

const createPlaylist = `-- name: CreatePlaylist :exec
INSERT INTO playlists (
  spotify_id, name 
) VALUES (
  $1, $2
) ON CONFLICT DO NOTHING
`

type CreatePlaylistParams struct {
	SpotifyID string
	Name      string
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) error {
	_, err := q.db.Exec(ctx, createPlaylist, arg.SpotifyID, arg.Name)
	return err
}

const createTrack = `-- name: CreateTrack :exec
INSERT INTO tracks (
  spotify_id, name, duration_ms
) VALUES (
  $1, $2, $3
) ON CONFLICT DO NOTHING
`

type CreateTrackParams struct {
	SpotifyID  string
	Name       string
	DurationMs pgtype.Int4
}

func (q *Queries) CreateTrack(ctx context.Context, arg CreateTrackParams) error {
	_, err := q.db.Exec(ctx, createTrack, arg.SpotifyID, arg.Name, arg.DurationMs)
	return err
}

const createTrackPlay = `-- name: CreateTrackPlay :exec
INSERT INTO track_plays (
  played_at, track_id, context, playlist_id
) VALUES (
  $1, $2, $3, $4
) ON CONFLICT DO NOTHING
`

type CreateTrackPlayParams struct {
	PlayedAt   pgtype.Timestamp
	TrackID    string
	Context    NullTrackPlayContext
	PlaylistID pgtype.Text
}

func (q *Queries) CreateTrackPlay(ctx context.Context, arg CreateTrackPlayParams) error {
	_, err := q.db.Exec(ctx, createTrackPlay,
		arg.PlayedAt,
		arg.TrackID,
		arg.Context,
		arg.PlaylistID,
	)
	return err
}

const getPlaylistByID = `-- name: GetPlaylistByID :one
SELECT created_at, updated_at, spotify_id, name FROM playlists
WHERE spotify_id = $1 LIMIT 1
`

func (q *Queries) GetPlaylistByID(ctx context.Context, spotifyID string) (Playlist, error) {
	row := q.db.QueryRow(ctx, getPlaylistByID, spotifyID)
	var i Playlist
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SpotifyID,
		&i.Name,
	)
	return i, err
}

const getPlaylistByName = `-- name: GetPlaylistByName :one
SELECT created_at, updated_at, spotify_id, name FROM playlists
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetPlaylistByName(ctx context.Context, name string) (Playlist, error) {
	row := q.db.QueryRow(ctx, getPlaylistByName, name)
	var i Playlist
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SpotifyID,
		&i.Name,
	)
	return i, err
}

const getPlaylists = `-- name: GetPlaylists :many
SELECT created_at, updated_at, spotify_id, name FROM playlists
`

func (q *Queries) GetPlaylists(ctx context.Context) ([]Playlist, error) {
	rows, err := q.db.Query(ctx, getPlaylists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SpotifyID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrackByID = `-- name: GetTrackByID :one
SELECT created_at, updated_at, spotify_id, name, duration_ms FROM tracks
WHERE spotify_id = $1 LIMIT 1
`

func (q *Queries) GetTrackByID(ctx context.Context, spotifyID string) (Track, error) {
	row := q.db.QueryRow(ctx, getTrackByID, spotifyID)
	var i Track
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SpotifyID,
		&i.Name,
		&i.DurationMs,
	)
	return i, err
}

const getTrackByName = `-- name: GetTrackByName :one
SELECT created_at, updated_at, spotify_id, name, duration_ms FROM tracks
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetTrackByName(ctx context.Context, name string) (Track, error) {
	row := q.db.QueryRow(ctx, getTrackByName, name)
	var i Track
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SpotifyID,
		&i.Name,
		&i.DurationMs,
	)
	return i, err
}

const listPlaylistsByID = `-- name: ListPlaylistsByID :many
SELECT spotify_id FROM playlists
`

func (q *Queries) ListPlaylistsByID(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listPlaylistsByID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var spotify_id string
		if err := rows.Scan(&spotify_id); err != nil {
			return nil, err
		}
		items = append(items, spotify_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
