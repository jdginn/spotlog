// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package models

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TrackPlayContext string

const (
	TrackPlayContextArtist   TrackPlayContext = "artist"
	TrackPlayContextPlaylist TrackPlayContext = "playlist"
	TrackPlayContextAlbum    TrackPlayContext = "album"
	TrackPlayContextShow     TrackPlayContext = "show"
)

func (e *TrackPlayContext) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TrackPlayContext(s)
	case string:
		*e = TrackPlayContext(s)
	default:
		return fmt.Errorf("unsupported scan type for TrackPlayContext: %T", src)
	}
	return nil
}

type NullTrackPlayContext struct {
	TrackPlayContext TrackPlayContext
	Valid            bool // Valid is true if TrackPlayContext is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTrackPlayContext) Scan(value interface{}) error {
	if value == nil {
		ns.TrackPlayContext, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TrackPlayContext.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTrackPlayContext) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TrackPlayContext), nil
}

type Like struct {
	CreatedAt pgtype.Timestamptz
}

type Playlist struct {
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	SpotifyID string
	Name      string
}

type Track struct {
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	SpotifyID  string
	Name       string
	DurationMs pgtype.Int4
}

type TrackPlay struct {
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	PlayedAt   pgtype.Timestamp
	TrackID    string
	Context    NullTrackPlayContext
	PlaylistID pgtype.Text
}
